Pascal is for building pyramids -- imposing, breathtaking, static
structures built by armies pushing heavy blocks into place. Lisp is for
building organisms -- imposing, breathtaking, dynamic structures built
by squads fitting fluctuating myriads of simpler organisms into place.
    --Alan J. Perlis, SICP Introduction
%
The discretionary exportable functionality entrusted to the individual
Lisp programmer is more than an order of magnitude greater than that to
be found within Pascal enterprises. Lisp programs inflate libraries with
functions whose utility transcends the application that produced them.
    --Alan J. Perlis, SICP Introduction
%
Lisp has such a simple syntax and semantics that parsing can be treated
as an elementary task. Thus parsing technology plays almost no role in
Lisp programs, and the construction of language processors is rarely an
impediment to the rate of growth and change of large Lisp systems.
    --Alan J. Perlis, SICP Introduction
%
Greenspun's Tenth Rule of Programming:
Any sufficiently complicated C or Fortran program contains an ad hoc
informally-specified bug-ridden slow implementation of half of Common
Lisp.
    --Philip Greenspun
%
Lisp is an excellent laboratory for language experimentation for two
reasons. First, one can choose a very small subset, with only a dozen
primitives or so, that is still recognizably a member of the class
of Lisp-like languages. It is very easy to bootstrap such a small
language, with variations of choice, on a new platform. If it looks
promising, one can flesh out the long laundry list of amenities later.
Second, it is particularly easy--the work of an hour or less--to
bootstrap such a new dialect within an existing Lisp implementation.
Even if the host implementation differs in fundamental ways from the
new dialect, it can provide primitive operations such as arithmetic
and I/O as well as being a programming language that is just plain
convenient for writing language interpreters. If you can live with
the generic, list-structure-oriented syntax, you can have a field day
reprogramming the semantics. After you get that right there is time
enough to re-engineer it and, if you must, slap a parser on the front.
    --Guy Steele and Richard Gabriel, "The Evolution of Lisp" (1993)
%
What I like about Lisp is that you can feel the bits between your toes.
    --Drew McDermott, 1977
